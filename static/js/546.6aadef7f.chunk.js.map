{"version":3,"file":"static/js/546.6aadef7f.chunk.js","mappings":"4JACA,MAA0B,yBAA1B,EAAmE,+BAAnE,EAA8I,0B,UCA9I,EAAyB,2BAAzB,EAA6D,2B,SCS7D,EARmB,SAACA,GAClB,IAAIC,EAAI,YAAAC,OAAeF,EAAMG,IAC7B,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAW,IAAMA,EAASC,UACxCH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIR,EAAKM,SAAEP,EAAMU,QAGhC,ECRA,EAA0B,yBCK1B,EAJgB,SAACV,GACf,OAAOI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEP,EAAMW,SAC3C,E,2DCGMC,GAAcC,EAAAA,EAAAA,GAAiB,IAwBrC,GAJ4BC,EAAAA,EAAAA,GAAU,CACpCC,KAAM,wBADoBD,EAlBL,SAACd,GACtB,OACEgB,EAAAA,EAAAA,MAAA,QAAMC,SAAUjB,EAAMkB,aAAaX,SAAA,EACjCH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEE,UACfH,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CACJC,SAAU,CAACC,EAAAA,EAAeT,GAC1BU,YAAa,gBACbZ,KAAM,iBACNa,UAAWC,EAAAA,QAGfpB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEE,UACfH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,cAIhB,ICWA,EA7BgB,SAACP,GACf,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAE,OACzC1B,EAAAA,EAAAA,KAAC2B,EAAU,CAACrB,KAAMoB,EAAGpB,KAAMP,GAAI2B,EAAG3B,IAAS2B,EAAG3B,GAAM,IAElD6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAACC,GAAE,OAC3C1B,EAAAA,EAAAA,KAAC8B,EAAO,CAACvB,QAASmB,EAAGnB,QAASR,GAAI2B,EAAG3B,IAAS2B,EAAG3B,GAAM,IAOzD,OAAKH,EAAMmC,QAKTnB,EAAAA,EAAAA,MAAA,OAAKX,UAAWC,EAAUC,SAAA,EACxBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,SAAEoB,KAClCX,EAAAA,EAAAA,MAAA,OAAKX,UAAWC,EAAWC,SAAA,EACzBH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEE,SAAEyB,KACnB5B,EAAAA,EAAAA,KAACgC,EAAmB,CAACnB,SAbP,SAACoB,GACnBrC,EAAMsC,YAAYD,EAAOE,eAC3B,WAGSnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAAC/B,GAAI,UAYzB,E,8BCqBA,GAAegC,E,QAAAA,KACbC,EAAAA,EAAAA,KApBoB,SAACjB,GACrB,MAAO,CACLC,YAAaD,EAAMC,YAEvB,IACyB,SAACiB,GACxB,MAAO,CACLL,YAAa,SAACC,GACZI,GAASC,EAAAA,EAAAA,GAAmBL,GAC9B,EAEJ,IAUEM,EAAAA,EAFF,CAGEC,E","sources":["webpack://prytkov-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://prytkov-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://prytkov-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsTextInput/DialogsTextInput.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KcjvI\",\"dialogs_items\":\"Dialogs_dialogs_items__FzQlJ\",\"active\":\"Dialogs_active__LwcRd\",\"messages\":\"Dialogs_messages__rUL1n\"};","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"DialogItem_active__5U9az\",\"dialog\":\"DialogItem_dialog__LVdAL\"};","import { NavLink } from \"react-router-dom\";\nimport s from './DialogItem.module.css'\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.id}`;\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__sYfpN\"};","import s from './Message.module.css'\n\nconst Message = (props) => {\n  return <div className={s.message}>{props.message}</div>;\n};\n\nexport default Message;","import { Field, reduxForm } from \"redux-form\";\nimport { TextArea } from \"../../common/preloader/formsControls/formsControls\";\nimport {\n  requiredField,\n  maxLengthCreator,\n} from \"../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div className=\"\">\n        <Field\n          validate={[requiredField, maxLength50]}\n          placeholder={\"Enter message\"}\n          name={\"newMessageBody\"}\n          component={TextArea}\n        />\n      </div>\n      <div className=\"\">\n        <button>Send!</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddMessageReduxForm = reduxForm({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n\nexport default AddMessageReduxForm;\n","import s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport AddMessageReduxForm from \"./DialogsTextInput/DialogsTextInput\";\n\nconst Dialogs = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogsElements = state.dialogs.map((el) => (\n    <DialogItem name={el.name} id={el.id} key={el.id} />\n  ));\n  let messagesElements = state.messages.map((el) => (\n    <Message message={el.message} id={el.id} key={el.id} />\n  ));\n\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  if (!props.isAuth) {\n    return <Navigate to={\"/login\"}></Navigate>;\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogs_items}>{dialogsElements}</div>\n      <div className={s.messages}>\n        <div className=\"\">{messagesElements}</div>\n        <AddMessageReduxForm onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import Dialogs from \"./Dialogs\";\nimport {\n  sendMessageCreator,\n} from \"../../redux/dialogsReducer\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../hoc/AuthRedirect\";\nimport { compose } from \"redux\";\n\n\n// const DialogsContainer = () => {\n//   return (\n//     <StoreContext.Consumer>\n//       {(store) => {\n        \n//         let state = store.getState().dialogsPage;\n\n//         let onNewMessageChange = (body) => {\n//           store.dispatch(updateNewMessageBodyCreator(body));\n//         };\n\n//         let onSendMessageClick = () => {\n//           store.dispatch(sendMessageCreator());\n//         };\n\n//         return (\n//           <Dialogs\n//             updateNewMessageBody={onNewMessageChange}\n//             sendMessage={onSendMessageClick}\n//             dialogsPage={state}\n//           />\n//         );\n//       }}\n//     </StoreContext.Consumer>\n//   );\n// };\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    }\n  }\n}\n\n\n//Вместо вызова HOC, и connect можно поместить все в Compose;\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect,  \n)(Dialogs);"],"names":["props","path","concat","id","_jsx","className","s","children","NavLink","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","validate","requiredField","placeholder","component","TextArea","state","dialogsPage","dialogsElements","dialogs","map","el","DialogItem","messagesElements","messages","Message","isAuth","AddMessageReduxForm","values","sendMessage","newMessageBody","Navigate","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}